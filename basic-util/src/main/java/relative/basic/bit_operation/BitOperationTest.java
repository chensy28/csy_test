package relative.basic.bit_operation;

/**
 * 位运算
 * @author : chensy
 * Date : 2020/10/20 上午12:07
 */
public class BitOperationTest {
    public static void main(String[] args) {
        System.out.println("与运算：" + (0&1) + ";" + (1&1) + ";" + (1&0) + ";" + (0&0));
        System.out.println("或运算：" + (0|1) + ";" + (1|1) + ";" + (1|0) + ";" + (0|0));
        System.out.println("异或运算：" + (0^1) + ";" + (1^1) + ";" + (1^0) + ";" + (0^0));
        System.out.println("取反运算：" + (~0) + ";" + (~1)); //todo 为啥此处显示 -1，-2

        System.out.println("左移运算：" + (3 << 2)); //每左移一位，相当于该数乘以2
        System.out.println("右移运算：" + (4 >> 2)); //操作数每右移一位，相当于该数除以2。
    }
}

/**
 * https://www.runoob.com/w3cnote/bit-operation.html 位运算|菜鸟教程
 * 从现代计算机中所有的数据二进制的形式存储在设备中。即 0、1 两种状态，
 * 计算机对二进制数据进行的运算(+、-、*、/)都是叫位运算，即将符号位共同参与运算的运算(会先转换为二进制再做运算)
 *
 *  &   与	两个位都为1时，结果才为1
 *  |	或	两个位都为0时，结果才为0
 *  ^	异或	两个位相同为0，相异为1
 *  ~	取反	0变1，1变0
 *  <<	左移	各二进位全部左移若干位，高位丢弃，低位补0
 *  >>	右移	各二进位全部右移若干位，对无符号数，高位补0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补0（逻辑右移）
 *
 *
 */

/**
 * 异或的几条性质:
 * 1、交换律
 * 2、结合律 (a^b)^c == a^(b^c)
 * 3、对于任何数x，都有 x^x=0，x^0=x
 * 4、自反性: a^b^b=a^0=a;
 */
